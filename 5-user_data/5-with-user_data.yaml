AWSTemplateFormatVersion: "2010-09-09"
Description: "Create EC2 with user data"

Parameters:
  EnvType:
    Type: String
    Default: "Dev"
    AllowedValues:
      - "Prod"
      - "Dev"
  PublicKey:
    Description: Input public key
    Type: String
    NoEcho: true

Conditions:
  # If first argument(!Ref EnvType) equals "Prod", return true, otherwise return false.
  IsProduction: !Equals [!Ref EnvType, "Prod"] 

Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        # If 'CreateLargeSize' condition is true, return `t2.large` else 't2.micro'
        'Fn::If':
          - IsProduction
          - 't2.large'
          - 't2.micro'
      ImageId: ami-06878d265978313ca
      UserData:
        Fn::Base64:
          !Sub  # Sub: Replace placeholder ${DirName} with `AWS::StackName`-`AWS:Region`-app
            - |
              #!/bin/bash
              apt-get update -y
              apt-get install apache2 -y
              mkdir -p /home/ubuntu/${DirName}
            - {DirName: !Join ['-', [!Ref AWS::StackName, !Ref AWS::Region, 'app']]}
      SecurityGroups:
        - !Ref SSHSecurityGroup
        - !Ref ServerSecurityGroup
      KeyName: 
        Ref: ImportedKeyPair

  # Run `ssh-keygen` to generate key pair
  ImportedKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: NameForMyImportedKeyPair
      PublicKeyMaterial: !Ref PublicKey

  # an elastic IP for our instance
  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref MyInstance

  # our EC2 security group
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22

  # our second EC2 security group
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable secure access via http
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 192.168.1.1/32
  
  # Storage
  DataVolume:
    Type: AWS::EC2::Volume
    Properties:
      Size: 100
      AvailabilityZone:
        !GetAtt MyInstance.AvailabilityZone

  MountPoint:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref MyInstance
      VolumeId: !Ref DataVolume
      Device: /dev/sdh

Outputs:
  PublicIp:
    Description: 'Public IP address'
    Value: !GetAtt MyEIP.PublicIp
    #Export:
    #  Name: "PublicIpAddress"